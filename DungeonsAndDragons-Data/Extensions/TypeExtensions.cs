using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace DungeonsAndDragons_Data
{
    public static class TypeExtensions
    {
        public static bool IsNumeric(this object value)
        {
            var stringValue = value as string;
            if (stringValue != null)
            {
                return stringValue.IsNumeric();
            }

            if (value is Type)
            {
                return ((Type)value).IsNumeric();
            }

            return value.GetType().IsNumeric();
        }

        public static bool IsNumeric(this Type type)
        {
            if (type.IsArray)
            {
                return false;
            }

            var code = Type.GetTypeCode(type);

            return
                code == TypeCode.Byte ||
                code == TypeCode.Decimal ||
                code == TypeCode.Double ||
                code == TypeCode.Int16 ||
                code == TypeCode.Int32 ||
                code == TypeCode.Int64 ||
                code == TypeCode.SByte ||
                code == TypeCode.Single ||
                code == TypeCode.UInt16 ||
                code == TypeCode.UInt32 ||
                code == TypeCode.UInt64;
        }

        /// <summary>
        ///     Determines whether the type specified is an anonymous object generated by the compiler.
        /// </summary>
        /// <param name="type">The type to check.</param>
        /// <returns>True if the type is anonymous, otherwise false</returns>
        /// <remarks>
        ///     <para>
        ///         This is only a vague guarantee that the type is anonymous, it could still be another type.
        ///         See:
        ///         http://stackoverflow.com/questions/315146/anonymous-types-are-there-any-distingushing-characteristics/315186#315186
        ///     </para>
        /// </remarks>
        public static bool IsAnonymousType(this Type type)
        {
            return type.IsClass
                   && type.IsSealed
                   && !type.IsNested
                   && type.Namespace == null
                   && type.GetCustomAttributes(typeof(CompilerGeneratedAttribute), false).Length > 0;
        }

        /// <summary>
        /// Performs an evaluation check on each of the types in the assembly and returns only those that pass.
        /// </summary>
        /// <param name="assembly">The assembly from which to get the types.</param>
        /// <param name="filter">A custom function to determine validity of the types.</param>
        /// <returns>A filtered collection of types from the assembly.</returns>
        /// <exception cref="ArgumentNullException">Thrown when the given assembly or filter function is null.</exception>
        public static IEnumerable<Type> GetTypes(this Assembly assembly, Func<Type, bool> filter)
        {
            Verify.NotNull(assembly, "assembly");
            Verify.NotNull(filter, "filter");

            foreach (var type in assembly.GetTypes())
            {
                if (filter.Invoke(type))
                {
                    yield return type;
                }
            }
        }

        /// <summary>
        /// Determines whether the given type is a generic base of the type in question.
        /// </summary>
        /// <param name="type">The type to check for a generic base.</param>
        /// <param name="genericBaseType">The expected generic base type.</param>
        /// <returns>True if the type inherits the expected generic base type; false otherwise.</returns>
        /// <remarks>
        /// Note: This method circumvents the issue with <seealso cref="Type.IsAssignableFrom"/> whereby
        /// generic types are not counted unless they generic parameters are also known.
        /// </remarks>
        public static bool IsOrInheritsGeneric(this Type type, Type genericBaseType)
        {
            var currentType = type;

            // Walk up the inheritance chain, looking for the generic base
            while (currentType != null && (!currentType.IsGenericType || currentType.GetGenericTypeDefinition() != genericBaseType))
            {
                currentType = currentType.BaseType;
            }

            // If the current type is null, then nothing was found; otherwise we found a match
            return currentType != null;
        }

        /// <summary>
        /// Determines whether or not the specified type has the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="type">The type to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static bool HasAttribute<TAttribute>(this Type type, bool inherit = false)
            where TAttribute : Attribute
        {
            return type.GetCustomAttributes(typeof(TAttribute), inherit).Length > 0;
        }

        /// <summary>
        /// Determines whether or not the specified type has the specified custom attribute.
        /// </summary>
        /// <param name="type">The type to check.</param>
        /// <param name="attributeType">The type of the attribute to look for.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static bool HasAttribute(this Type type, Type attributeType, bool inherit = false)
        {
            return type.GetCustomAttributes(attributeType, inherit).Length > 0;
        }

        /// <summary>
        /// Determines whether or not the specified type has the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="assembly">The type to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static bool HasAttribute<TAttribute>(this Assembly assembly, bool inherit = false)
            where TAttribute : Attribute
        {
            return assembly.GetCustomAttributes(typeof(TAttribute), inherit).Length > 0;
        }

        /// <summary>
        /// Gets the specified custom attributes.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="type">The type to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static TAttribute[] GetAttributes<TAttribute>(this Type type, bool inherit = false)
            where TAttribute : Attribute
        {
            return type.GetCustomAttributes(typeof(TAttribute), inherit).Cast<TAttribute>().ToArray();
        }

        /// <summary>
        /// Gets the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="type">The type to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static TAttribute GetAttribute<TAttribute>(this Type type, bool inherit = false)
            where TAttribute : Attribute
        {
            return type.GetCustomAttributes(typeof(TAttribute), inherit).Cast<TAttribute>().FirstOrDefault();
        }

        /// <summary>
        ///Gets the specified custom attribute.
        /// </summary>
        /// <param name="type">The type to check.</param>
        /// <param name="attributeType">The type of the attribute to look for.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        public static Attribute GetAttribute(this Type type, Type attributeType, bool inherit = false)
        {
            return type.GetCustomAttributes(attributeType, inherit).Cast<Attribute>().FirstOrDefault();
        }

        /// <summary>
        /// Determines whether or not the specified <paramref name="memberInfo"/> has the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null.</exception>
        public static bool HasAttribute<TAttribute>(this MemberInfo memberInfo, bool inherit = false)
            where TAttribute : Attribute
        {
            Verify.NotNull(memberInfo, nameof(memberInfo));

            return memberInfo.GetCustomAttributes(typeof(TAttribute), inherit).Length > 0;
        }

        /// <summary>
        /// Determines whether or not the specified <paramref name="memberInfo"/> has the specified custom attribute.
        /// </summary>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="attributeType">The type of the attribute to look for.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null or <paramref name="attributeType"/> is null.</exception>
        public static bool HasAttribute(this MemberInfo memberInfo, Type attributeType, bool inherit = false)
        {
            Verify.NotNull(memberInfo, nameof(memberInfo));
            Verify.NotNull(attributeType, nameof(attributeType));

            return memberInfo.GetCustomAttributes(attributeType, inherit).Length > 0;
        }

        /// <summary>
        /// Gets the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null.</exception>
        public static TAttribute GetAttribute<TAttribute>(this MemberInfo memberInfo, bool inherit = false)
            where TAttribute : Attribute
        {
            Verify.NotNull(memberInfo, nameof(memberInfo));

            return memberInfo.GetCustomAttributes(typeof(TAttribute), inherit).Cast<TAttribute>().FirstOrDefault();
        }

        /// <summary>
        ///Gets the specified custom attribute.
        /// </summary>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="attributeType">The type of the attribute to look for.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null or <paramref name="attributeType"/> is null.</exception>
        public static Attribute GetAttribute(this MemberInfo memberInfo, Type attributeType, bool inherit = false)
        {
            Verify.NotNull(memberInfo, nameof(memberInfo));
            Verify.NotNull(attributeType, nameof(attributeType));

            return memberInfo.GetCustomAttributes(attributeType, inherit).Cast<Attribute>().FirstOrDefault();
        }

        /// <summary>
        /// Gets the specified custom attribute.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to look for.</typeparam>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null.</exception>
        public static TAttribute[] GetAttributes<TAttribute>(this MemberInfo memberInfo, bool inherit = false)
            where TAttribute : Attribute
        {
            Verify.NotNull(memberInfo, nameof(memberInfo));

            return memberInfo.GetCustomAttributes(typeof(TAttribute), inherit).Cast<TAttribute>().ToArray();
        }

        /// <summary>
        ///Gets the specified custom attribute.
        /// </summary>
        /// <param name="memberInfo">The member info to check.</param>
        /// <param name="attributeType">The type of the attribute to look for.</param>
        /// <param name="inherit">Whether or not to check the inheritance heirarchy for the attribute.</param>
        /// <returns>True if the attribute has been specified, otherwise false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="memberInfo"/> is null or <paramref name="attributeType"/> is null.</exception>
        public static Attribute[] GetAttributse(this MemberInfo memberInfo, Type attributeType, bool inherit = false)
        {
            // TODO: Correct the name of this function
            Verify.NotNull(memberInfo, nameof(memberInfo));
            Verify.NotNull(attributeType, nameof(attributeType));

            return memberInfo.GetCustomAttributes(attributeType, inherit).Cast<Attribute>().ToArray();
        }
    }
}
